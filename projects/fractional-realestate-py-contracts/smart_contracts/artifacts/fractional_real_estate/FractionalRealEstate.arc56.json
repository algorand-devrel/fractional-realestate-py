{
    "name": "FractionalRealEstate",
    "structs": {
        "PropertyStruct": [
            {
                "name": "address",
                "type": "string"
            },
            {
                "name": "total_shares",
                "type": "uint64"
            },
            {
                "name": "available_shares",
                "type": "uint64"
            },
            {
                "name": "price_per_share",
                "type": "uint64"
            },
            {
                "name": "property_asset_id",
                "type": "uint64"
            },
            {
                "name": "owner_address",
                "type": "address"
            }
        ]
    },
    "methods": [
        {
            "name": "create_property_listing",
            "args": [
                {
                    "type": "string",
                    "name": "property_address"
                },
                {
                    "type": "uint64",
                    "name": "shares"
                },
                {
                    "type": "uint64",
                    "name": "price_per_share"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "purchase_from_lister",
            "args": [
                {
                    "type": "uint64",
                    "name": "property_id"
                },
                {
                    "type": "uint64",
                    "name": "shares"
                },
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_property_info",
            "args": [
                {
                    "type": "uint64",
                    "name": "property_id"
                }
            ],
            "returns": {
                "type": "(string,uint64,uint64,uint64,uint64,address)",
                "struct": "PropertyStruct"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "Smart contract for fractional real estate ownership.",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {},
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "listed_properties": {
                    "keyType": "uint64",
                    "valueType": "PropertyStruct",
                    "prefix": "cHJvcGVydGllcw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        336
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        269
                    ],
                    "errorMessage": "Invalid payment amount"
                },
                {
                    "pc": [
                        277
                    ],
                    "errorMessage": "Invalid payment receiver"
                },
                {
                    "pc": [
                        285
                    ],
                    "errorMessage": "Invalid payment sender"
                },
                {
                    "pc": [
                        256
                    ],
                    "errorMessage": "Not enough shares available"
                },
                {
                    "pc": [
                        62,
                        81,
                        120
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        242,
                        363
                    ],
                    "errorMessage": "Property not listed"
                },
                {
                    "pc": [
                        150
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        65,
                        84,
                        123
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        245,
                        365
                    ],
                    "errorMessage": "check self.listed_properties entry exists"
                },
                {
                    "pc": [
                        100
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiADAQASJgIEFR98dQpwcm9wZXJ0aWVzMRtBAHGCAwRerGvFBH1QeoQE8wq0OzYaAI4DADwAFQACI0MxGRREMRhENhoBiAEYKExQsCJDMRkURDEYRDYaATYaAjEWIglJOBAiEkSIAH+AAQAjTwJUKExQsCJDMRkURDEYRDYaATYaAjYaA4gAEShMULAiQzEZQP+mMRgURCJDigMBsYv9VwIAi/4XMgpJsiqyKSOyI7IigARQUk9QsiWyJoEDshAjsgGztDwWMQCAAgBCi/5Qi/5Qi/9QSwJQTFCL/VApSwJQSbxITL+JigMBKYv9UEm9RQFESb5Ei/4XSwGBCltKDkSL/zgISwMkW0sDCxJEi/84BzIKEkSL/zgAMQASRLFLAoEaWzEASwOyErIUshGBBLIQI7IBs0sBCRZPAkxcCksCvEhPAksBv7FJJFtPAgtMVyIgsgeyCCKyECOyAbMiiYoBASmL/1BJvUUBRL5EiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}